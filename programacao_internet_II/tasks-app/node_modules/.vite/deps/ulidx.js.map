{
  "version": 3,
  "sources": ["../../layerr/dist/error.js", "../../layerr/dist/tools.js", "../../layerr/dist/layerr.js", "../../ulidx/dist/browser/index.js"],
  "sourcesContent": ["export function assertError(err) {\n    if (!isError(err)) {\n        throw new Error(\"Parameter was not an error\");\n    }\n}\nexport function isError(err) {\n    return objectToString(err) === \"[object Error]\" || err instanceof Error;\n}\nfunction objectToString(obj) {\n    return Object.prototype.toString.call(obj);\n}\n", "import { isError } from \"./error.js\";\nexport function parseArguments(args) {\n    let options, shortMessage = \"\";\n    if (args.length === 0) {\n        options = {};\n    }\n    else if (isError(args[0])) {\n        options = {\n            cause: args[0]\n        };\n        shortMessage = args.slice(1).join(\" \") || \"\";\n    }\n    else if (args[0] && typeof args[0] === \"object\") {\n        options = Object.assign({}, args[0]);\n        shortMessage = args.slice(1).join(\" \") || \"\";\n    }\n    else if (typeof args[0] === \"string\") {\n        options = {};\n        shortMessage = shortMessage = args.join(\" \") || \"\";\n    }\n    else {\n        throw new Error(\"Invalid arguments passed to Layerr\");\n    }\n    return {\n        options,\n        shortMessage\n    };\n}\n", "import { assertError, isError } from \"./error.js\";\nimport { parseArguments } from \"./tools.js\";\nexport class Layerr extends Error {\n    constructor(errorOptionsOrMessage, messageText) {\n        const args = [...arguments];\n        const { options, shortMessage } = parseArguments(args);\n        let message = shortMessage;\n        if (options.cause) {\n            message = `${message}: ${options.cause.message}`;\n        }\n        super(message);\n        this.message = message;\n        if (options.name && typeof options.name === \"string\") {\n            this.name = options.name;\n        }\n        else {\n            this.name = \"Layerr\";\n        }\n        if (options.cause) {\n            Object.defineProperty(this, \"_cause\", { value: options.cause });\n        }\n        Object.defineProperty(this, \"_info\", { value: {} });\n        if (options.info && typeof options.info === \"object\") {\n            Object.assign(this._info, options.info);\n        }\n        if (Error.captureStackTrace) {\n            const ctor = options.constructorOpt || this.constructor;\n            Error.captureStackTrace(this, ctor);\n        }\n    }\n    static cause(err) {\n        assertError(err);\n        if (!err._cause)\n            return null;\n        return isError(err._cause) ? err._cause : null;\n    }\n    static fullStack(err) {\n        assertError(err);\n        const cause = Layerr.cause(err);\n        if (cause) {\n            return `${err.stack}\\ncaused by: ${Layerr.fullStack(cause)}`;\n        }\n        return err.stack;\n    }\n    static info(err) {\n        assertError(err);\n        const output = {};\n        const cause = Layerr.cause(err);\n        if (cause) {\n            Object.assign(output, Layerr.info(cause));\n        }\n        if (err._info) {\n            Object.assign(output, err._info);\n        }\n        return output;\n    }\n    cause() {\n        return Layerr.cause(this);\n    }\n    toString() {\n        let output = this.name || this.constructor.name || this.constructor.prototype.name;\n        if (this.message) {\n            output = `${output}: ${this.message}`;\n        }\n        return output;\n    }\n}\n", "import { Layerr } from 'layerr';\n\n// These values should NEVER change. The values are precisely for\n// generating ULIDs.\nconst ENCODING = \"0123456789ABCDEFGHJKMNPQRSTVWXYZ\"; // Crockford's Base32\nconst ENCODING_LEN = 32; // from ENCODING.length;\nconst TIME_MAX = 281474976710655; // from Math.pow(2, 48) - 1;\nconst TIME_LEN = 10;\nconst RANDOM_LEN = 16;\nconst ERROR_INFO = Object.freeze({\n    source: \"ulid\"\n});\nfunction decodeTime(id) {\n    if (id.length !== TIME_LEN + RANDOM_LEN) {\n        throw new Layerr({\n            info: {\n                code: \"DEC_TIME_MALFORMED\",\n                ...ERROR_INFO\n            }\n        }, \"Malformed ULID\");\n    }\n    const time = id\n        .substr(0, TIME_LEN)\n        .toUpperCase()\n        .split(\"\")\n        .reverse()\n        .reduce((carry, char, index) => {\n        const encodingIndex = ENCODING.indexOf(char);\n        if (encodingIndex === -1) {\n            throw new Layerr({\n                info: {\n                    code: \"DEC_TIME_CHAR\",\n                    ...ERROR_INFO\n                }\n            }, `Time decode error: Invalid character: ${char}`);\n        }\n        return (carry += encodingIndex * Math.pow(ENCODING_LEN, index));\n    }, 0);\n    if (time > TIME_MAX) {\n        throw new Layerr({\n            info: {\n                code: \"DEC_TIME_CHAR\",\n                ...ERROR_INFO\n            }\n        }, `Malformed ULID: timestamp too large: ${time}`);\n    }\n    return time;\n}\nfunction detectPRNG(root) {\n    const rootLookup = root || detectRoot();\n    const globalCrypto = (rootLookup && (rootLookup.crypto || rootLookup.msCrypto)) ||\n        (null);\n    if (typeof globalCrypto?.getRandomValues === \"function\") {\n        return () => {\n            const buffer = new Uint8Array(1);\n            globalCrypto.getRandomValues(buffer);\n            return buffer[0] / 0xff;\n        };\n    }\n    else if (typeof globalCrypto?.randomBytes === \"function\") {\n        return () => globalCrypto.randomBytes(1).readUInt8() / 0xff;\n    }\n    else ;\n    throw new Layerr({\n        info: {\n            code: \"PRNG_DETECT\",\n            ...ERROR_INFO\n        }\n    }, \"Failed to find a reliable PRNG\");\n}\nfunction detectRoot() {\n    if (inWebWorker())\n        return self;\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    return null;\n}\nfunction encodeRandom(len, prng) {\n    let str = \"\";\n    for (; len > 0; len--) {\n        str = randomChar(prng) + str;\n    }\n    return str;\n}\nfunction encodeTime(now, len) {\n    if (isNaN(now)) {\n        throw new Layerr({\n            info: {\n                code: \"ENC_TIME_NAN\",\n                ...ERROR_INFO\n            }\n        }, `Time must be a number: ${now}`);\n    }\n    else if (now > TIME_MAX) {\n        throw new Layerr({\n            info: {\n                code: \"ENC_TIME_SIZE_EXCEED\",\n                ...ERROR_INFO\n            }\n        }, `Cannot encode a time larger than ${TIME_MAX}: ${now}`);\n    }\n    else if (now < 0) {\n        throw new Layerr({\n            info: {\n                code: \"ENC_TIME_NEG\",\n                ...ERROR_INFO\n            }\n        }, `Time must be positive: ${now}`);\n    }\n    else if (Number.isInteger(now) === false) {\n        throw new Layerr({\n            info: {\n                code: \"ENC_TIME_TYPE\",\n                ...ERROR_INFO\n            }\n        }, `Time must be an integer: ${now}`);\n    }\n    let mod, str = \"\";\n    for (let currentLen = len; currentLen > 0; currentLen--) {\n        mod = now % ENCODING_LEN;\n        str = ENCODING.charAt(mod) + str;\n        now = (now - mod) / ENCODING_LEN;\n    }\n    return str;\n}\n/**\n * Fix a ULID's Base32 encoding -\n * i and l (case-insensitive) will be treated as 1 and o (case-insensitive) will be treated as 0.\n * hyphens are ignored during decoding.\n * @param id\n * @returns The cleaned up ULID\n */\nfunction fixULIDBase32(id) {\n    return id.replace(/i/gi, \"1\").replace(/l/gi, \"1\").replace(/o/gi, \"0\").replace(/-/g, \"\");\n}\nfunction incrementBase32(str) {\n    let done = undefined, index = str.length, char, charIndex, output = str;\n    const maxCharIndex = ENCODING_LEN - 1;\n    while (!done && index-- >= 0) {\n        char = output[index];\n        charIndex = ENCODING.indexOf(char);\n        if (charIndex === -1) {\n            throw new Layerr({\n                info: {\n                    code: \"B32_INC_ENC\",\n                    ...ERROR_INFO\n                }\n            }, \"Incorrectly encoded string\");\n        }\n        if (charIndex === maxCharIndex) {\n            output = replaceCharAt(output, index, ENCODING[0]);\n            continue;\n        }\n        done = replaceCharAt(output, index, ENCODING[charIndex + 1]);\n    }\n    if (typeof done === \"string\") {\n        return done;\n    }\n    throw new Layerr({\n        info: {\n            code: \"B32_INC_INVALID\",\n            ...ERROR_INFO\n        }\n    }, \"Failed incrementing string\");\n}\nfunction inWebWorker() {\n    // @ts-ignore\n    return typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope;\n}\nfunction isValid(id) {\n    return (typeof id === \"string\" &&\n        id.length === TIME_LEN + RANDOM_LEN &&\n        id\n            .toUpperCase()\n            .split(\"\")\n            .every(char => ENCODING.indexOf(char) !== -1));\n}\nfunction monotonicFactory(prng) {\n    const currentPRNG = prng || detectPRNG();\n    let lastTime = 0, lastRandom;\n    return function _ulid(seedTime) {\n        const seed = isNaN(seedTime) ? Date.now() : seedTime;\n        if (seed <= lastTime) {\n            const incrementedRandom = (lastRandom = incrementBase32(lastRandom));\n            return encodeTime(lastTime, TIME_LEN) + incrementedRandom;\n        }\n        lastTime = seed;\n        const newRandom = (lastRandom = encodeRandom(RANDOM_LEN, currentPRNG));\n        return encodeTime(seed, TIME_LEN) + newRandom;\n    };\n}\nfunction randomChar(prng) {\n    let rand = Math.floor(prng() * ENCODING_LEN);\n    if (rand === ENCODING_LEN) {\n        rand = ENCODING_LEN - 1;\n    }\n    return ENCODING.charAt(rand);\n}\nfunction replaceCharAt(str, index, char) {\n    if (index > str.length - 1) {\n        return str;\n    }\n    return str.substr(0, index) + char + str.substr(index + 1);\n}\nfunction ulid(seedTime, prng) {\n    const currentPRNG = prng || detectPRNG();\n    const seed = isNaN(seedTime) ? Date.now() : seedTime;\n    return encodeTime(seed, TIME_LEN) + encodeRandom(RANDOM_LEN, currentPRNG);\n}\n\nexport { decodeTime, detectPRNG, encodeTime, fixULIDBase32, isValid, monotonicFactory, ulid };\n"],
  "mappings": "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",
  "names": []
}
