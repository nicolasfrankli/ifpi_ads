Em um sistema bancário temos as seguintes classes:
public class ContaBancaria {
    private double saldo;
    public ContaBancaria(double saldoInicial) {
        this.saldo = saldoInicial;
    }
    public void depositar(double valor) { saldo += valor; }
    public void sacar(double valor) { saldo -= valor; }
}
public class ContaPoupanca extends ContaBancaria {
    public ContaPoupanca(double saldoInicial) {
        super(saldoInicial);
    }
    @Override
    public void sacar(double valor) {
    if (valor > 1000) {
        throw new RuntimeException("Não pode sacar mais de 1000 em uma poupança");
    }
    super.sacar(valor);
}
}
Explique por que motivo a herança entre as classes não é justificada e proponha uma solução.

RESPOSTA: 
A restrição de saque na classe 'ContaPoupanca' é uma quebra no Princípio de Substituição de Liskov porque
a classe herdada não pode adicionar restrições que não existem no método da classe Pai.

Para a solução, podemos criar uma interface OperacoesBancarias com os métodos Depositar e Sacar.
As classes Conta Bancaria e ContaPoupanca implementariam a interface.

public interface OperacoesBancarias {
   void depositar(double valor);
   void sacar(double valor);
}

public class ContaBancaria implements OperacoesBancarias {
}

public class ContaPoupanca implements OperacoesBancarias {
}
